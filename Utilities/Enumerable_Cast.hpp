//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

#pragma once

//////////////////////////////////////////////////////////////////////////

#include "Enumerable.h"

//////////////////////////////////////////////////////////////////////////

namespace Enumerable
{
	inline void Cast(const std::string& in, int* out)
	{
		*out = atoi(in.c_str());
	}
}

//////////////////////////////////////////////////////////////////////////

template <typename T, typename IN_TYPE>
bool Enumerator_Convert<T, IN_TYPE>::GetCurrent(T* value)
{
	IN_TYPE original;
	if (m_wrappedSource->GetCurrent(&original))
	{
		::Enumerable::Cast(original, value);
		return true;
	}
	return false;
}

//////////////////////////////////////////////////////////////////////////
